apiVersion: apps/v1
kind: Deployment
metadata:
  name: efs-csi-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: efs-csi-controller
    app: csi-efs
    role: driver-efs-controller
    high-availability-config.resources.gardener.cloud/type: controller
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: efs-csi-controller
      app: csi-efs
      role: driver-efs-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: efs-csi-controller
        app: csi-efs
        role: driver-efs-controller
        gardener.cloud/role: driver-efs-controller
        networking.gardener.cloud/to-dns: allowed
        networking.gardener.cloud/to-public-networks: allowed
        networking.gardener.cloud/to-private-networks: allowed
        networking.resources.gardener.cloud/to-kube-apiserver-tcp-443: allowed
    spec:
      automountServiceAccountToken: true
      {{- if hasKey .Values.controller "hostNetwork" }}
      hostNetwork: {{ .Values.controller.hostNetwork }}
      {{- end }}
      serviceAccountName: {{ .Values.controller.serviceAccount.name }}
      {{- with .Values.controller.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.controller.dnsPolicy }}
      dnsPolicy: {{ .Values.controller.dnsPolicy }}
      {{- end }}
      containers:
        - name: aws-csi-driver-efs
          image: {{ index .Values.images "csi-driver-efs" }}
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v={{ .Values.controller.logLevel }}
            - --delete-access-point-root-dir={{ .Values.controller.deleteAccessPointRootDir }}
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          ports:
            - name: healthz
              containerPort: {{ .Values.controller.healthPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
          {{- with .Values.resources.driverController }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
        - name: aws-csi-provisioner
          image: {{ index .Values.images "csi-provisioner" }}
          args:
            - --csi-address=$(ADDRESS)
            - --v={{ .Values.controller.logLevel }}
            - --feature-gates=Topology=true
            {{- if .Values.controller.extraCreateMetadata }}
            - --extra-create-metadata
            {{- end }}
            - --leader-election
            {{- if hasKey .Values.controller "leaderElectionRenewDeadline" }}
            - --leader-election-renew-deadline={{ .Values.controller.leaderElectionRenewDeadline }}
            {{- end }}
            {{- if hasKey .Values.controller "leaderElectionLeaseDuration" }}
            - --leader-election-lease-duration={{ .Values.controller.leaderElectionLeaseDuration }}
            {{- end }}
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          {{- with .Values.resources.provisioner }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
        - name: liveness-probe
          image: {{ index .Values.images "csi-liveness-probe" }}
          args:
            - --csi-address=/csi/csi.sock
            - --health-port={{ .Values.controller.healthPort }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          {{- with .Values.resources.livenessProbe }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: socket-dir
          emptyDir: {}