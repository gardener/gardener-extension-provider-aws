// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// scripts/health-monitor.tpl.sh
// scripts/init.tpl.sh
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsHealthMonitorTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\xf3\x40\x10\x86\xef\xf3\x2b\xde\xf6\xfb\xae\x92\x16\xc1\x4b\xd1\x4b\xdb\x9b\xa8\x90\xa3\x48\xd9\x66\x27\xee\xe0\x76\x26\x64\x27\x7a\x10\xff\xbb\x34\xb6\x90\x42\xf7\x36\xf3\xb0\xbc\xcf\xbc\xff\x66\xd5\x5e\xb4\xda\x87\x92\xa8\xb0\xe3\xc6\xa0\x36\x68\x61\x3f\x8f\x9d\x74\xdc\x06\xc9\x44\xed\xa0\x8d\x8b\x29\x1a\x53\x0f\xa2\xdc\xc7\xdd\xc1\x54\xdc\x7a\xd1\x77\x7c\x13\xc0\x4d\x32\xcc\xd7\x67\xbe\xc1\x89\x23\x85\x82\xe2\xa1\x77\x8e\x98\xcd\x09\xf8\x4a\x92\x19\xaf\x58\xe2\x6d\x85\x68\x04\x00\xd2\x62\x06\x97\x03\xdb\xe0\xb8\x5b\xa0\xf1\x1e\x0d\xb2\x14\xc7\x03\xaa\xc8\x9f\x95\x0e\x39\xaf\xe0\x89\x75\xfc\x70\x25\x30\x06\x3e\x98\xe2\x68\xcc\x71\x4c\x3a\xbe\xee\x43\x72\x9e\x78\x9f\xd6\x25\x33\x77\xb8\x5d\x8c\x23\xe7\xc2\x17\xfb\xff\xf5\xe3\x76\xfb\xb2\xab\xb7\xeb\xe7\xa7\x4d\x3d\xa2\x56\x08\x88\xa6\x4c\x3f\x44\x17\xf8\x7e\xb9\xa0\x3f\x99\xfa\x78\x26\x12\x87\xec\x09\x93\x7e\x5a\xeb\x27\x06\x73\xba\xda\x22\xfd\x06\x00\x00\xff\xff\x00\x11\x69\x9f\x91\x01\x00\x00")

func scriptsHealthMonitorTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsHealthMonitorTplSh,
		"scripts/health-monitor.tpl.sh",
	)
}

func scriptsHealthMonitorTplSh() (*asset, error) {
	bytes, err := scriptsHealthMonitorTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/health-monitor.tpl.sh", size: 401, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsInitTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x5f\x8f\x93\x40\x14\xc5\xdf\xef\xa7\x38\x3b\x4b\xb2\x6a\x02\x63\xe2\x9b\x2e\x26\x6a\x68\x6c\x62\x76\x37\xd1\xf8\xd2\xad\x64\x60\x2e\x74\x14\x86\x86\x99\x36\x36\xa5\xdf\xdd\x00\xa5\x7f\xdc\x17\x86\x0b\x87\xdf\x39\xdc\x73\x7b\x23\x33\x63\x65\xa6\xdc\x8a\x68\x36\xff\x96\xc4\x92\x7d\x2e\xf3\xc6\x7a\x65\x2c\xb7\xba\xbf\x2d\x4c\x19\xf9\xa6\xae\xc8\x14\x58\xe0\x06\x61\x01\x11\xf4\x62\x81\xe5\x07\xf8\x15\x5b\x02\xea\x3f\xda\xb4\x08\xd7\xf8\x0f\x40\xc0\x79\xc0\x48\x83\xe6\x42\x6d\x2a\x8f\x8f\x13\x88\x0a\x43\x74\x8b\x8d\x63\x18\xfb\x9b\x73\xcf\x1a\xa6\x56\x25\x43\x39\x38\x65\x75\xd6\xfc\x1d\x1f\xd0\x71\x4a\x87\x29\xad\x8c\xe5\x58\x04\xaf\xca\x96\xd7\xb8\x7a\x85\x81\x8c\x0e\x8e\x35\x42\xc6\x9d\x93\xbf\x16\x58\xbe\x91\xf2\xee\xb5\xa0\xb5\xda\x38\x1e\x85\xf1\x7e\x8f\x68\x98\xbf\x4c\x41\xe7\x03\xe0\x70\xa0\xe1\x5b\x03\x08\xd7\x05\x2f\x8d\xbb\x6b\xc3\x18\xcf\x22\xb8\x00\x3f\x8b\xae\x14\x63\x0c\xa2\xcf\xf3\x87\xf4\xe9\xd3\x8f\xaf\x83\x5b\x66\xac\x6a\x77\x4f\xca\xaf\x7a\x93\xd3\xea\x82\x49\x44\x94\x3c\xfc\x4c\xcf\x7d\xb8\x9d\xf3\x5c\xeb\xe3\x79\xb1\xdd\xc8\x71\xbb\x35\x39\x47\x5a\xbe\x7b\x1b\xb2\xdd\xa6\xc7\xbe\xfa\xe3\xaa\xaf\x09\x78\xd9\x59\xae\x3c\xee\xef\x93\xc7\x19\x3a\x78\x66\x9c\x44\xb4\xf8\x3e\x72\x97\x94\xd8\xad\x69\x1b\x5b\xb3\xf5\xb1\x18\x7e\xe0\x94\xf2\x7d\xd0\x5f\x05\x25\x8f\x33\x02\xc6\x6c\xb9\xaf\xa0\x15\xd7\x8d\x0d\x5b\xae\x1a\xa5\xfb\x66\xff\x05\x00\x00\xff\xff\xf0\xdc\xcc\x9d\x66\x02\x00\x00")

func scriptsInitTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsInitTplSh,
		"scripts/init.tpl.sh",
	)
}

func scriptsInitTplSh() (*asset, error) {
	bytes, err := scriptsInitTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/init.tpl.sh", size: 614, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/health-monitor.tpl.sh": scriptsHealthMonitorTplSh,
	"scripts/init.tpl.sh":           scriptsInitTplSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"health-monitor.tpl.sh": &bintree{scriptsHealthMonitorTplSh, map[string]*bintree{}},
		"init.tpl.sh":           &bintree{scriptsInitTplSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
