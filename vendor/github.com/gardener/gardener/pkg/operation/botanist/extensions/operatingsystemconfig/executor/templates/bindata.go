// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// scripts/execute-cloud-config.tpl.sh
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsExecuteCloudConfigTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6f\x73\xda\xb8\xd6\x7f\xef\x4f\x71\xea\x32\x4d\xd8\x89\x60\xbb\xb3\xcf\xf3\x82\x5d\x3a\x97\x02\x6d\x33\x4d\x20\x03\x34\x77\xf6\xde\x76\xa8\xb0\x0e\xa0\x62\x4b\xae\x2c\x27\xa5\x84\xef\x7e\x47\x92\x6d\x0c\x98\x24\x77\xe6\xee\x2b\x6c\xf9\xe8\xa7\xf3\xf7\x77\x8e\x78\xf9\xa2\x39\xe3\xa2\x39\xa3\xc9\x12\x08\xa6\x9e\x77\xd3\x99\x7c\x98\x76\xaf\x86\x9f\x7a\xdd\xe1\xe0\xdd\xe5\xfb\x69\x6f\xf8\xcf\xc1\xd5\xb0\xd3\xeb\x8f\xa6\xe3\xfe\xe8\xb6\x3f\x6a\xfb\x9b\x0d\x34\x62\xaa\x97\x5d\x85\x0c\x85\xe6\x34\x4c\xc6\xa8\xee\x50\xc1\x76\xeb\x3f\x8a\xd0\xed\x4c\xbb\xfd\xd1\xa4\x12\xa2\xdb\xe9\xa2\xd2\x95\x10\x3b\xf9\x9e\xbc\x17\xa1\xa4\x0c\x59\x37\x94\x29\xeb\x4a\x31\xe7\x8b\xea\x63\x87\x57\xbd\xb6\x5f\xdb\x1c\xae\x6f\x1b\x32\x64\xb9\xf8\x87\x7e\xf7\xe3\xf8\xd3\x75\x25\xfe\x12\x83\x55\x92\x46\x25\xf0\x6e\x6f\x3a\xee\x8e\x2e\x6f\xca\xfa\x77\x7b\xe3\x40\xf1\x58\x57\x89\x55\xe0\x17\xf2\x8f\xc1\x17\xfb\xf6\x6d\x38\xfe\x9e\xd9\x12\xad\x18\x57\x40\x62\x38\x32\x23\xe9\x71\x85\x81\x96\x6a\x6d\xce\xd9\x7d\xff\x98\xce\x30\x44\xbd\xf7\xd5\xf3\xe6\xa9\x08\x34\x97\x02\x98\x0c\x56\xa8\x48\xac\xd0\x80\x9c\xd7\x61\xe3\x01\x08\x1a\x61\xdb\xaf\xbd\xf6\x3d\x00\x1e\xd1\x85\x79\xf9\xcd\xbc\x60\xb0\x94\xe0\x5b\x83\xb8\x58\xc0\xfd\x12\xf5\x12\x15\x68\x09\x19\x00\xd4\xcc\x5e\x98\x2b\x19\x41\xcd\x6e\xb5\x18\x73\xf8\x37\x90\x9f\x50\x3b\x77\xc7\x39\xd0\x04\xc8\x77\xf0\x33\xa9\x3a\x7c\xf9\x03\xf4\x12\x85\x07\x90\x9f\x73\xe3\x30\xcd\x49\x95\xb0\x90\x69\x0f\x71\x1a\x86\x05\x92\x51\x33\x4c\xb0\x84\x33\x90\x20\x10\xd9\x93\x6a\xce\xb9\xb7\xf5\xbc\xcd\xc6\xe8\xdb\x58\x65\x7e\xa3\x9a\xde\xca\x30\x8d\x10\xc8\x76\xbb\xf3\xdb\x5c\xaa\x88\x6a\xc2\xa8\xa6\x84\xe1\x1d\x0f\x30\xf3\xdd\x55\xe7\x6d\xff\xaa\xfd\xf1\xd3\xdb\x7e\xaf\x7f\xeb\x6c\x7f\x01\xb3\x70\xc5\x19\x10\x12\xd2\x19\x86\x50\xb3\x32\xf0\xa6\xc9\xf0\xae\x29\xd2\x30\x2c\x59\xde\xeb\xdf\x5e\x76\xfb\xe3\x76\xed\x3c\x4c\x66\xe1\x0a\x08\x9b\x25\xe2\x06\x88\x84\x41\xe7\xba\x7f\x71\xd3\x19\x4d\x26\x7f\xdd\xf4\x2f\xde\x8d\xed\xcf\xf8\xf2\x5f\xfd\xba\xdd\x78\xdd\x99\x74\x3f\x5c\x0e\xde\x4f\x77\x08\xce\xfa\x5a\xb6\xe0\xc3\x03\x2c\x14\xc6\x70\x96\x83\xb4\x7d\xbf\xf1\x8b\x03\xb2\x8f\x06\xcc\xe5\xef\x91\xf1\x8d\x84\xff\x44\x93\x3a\x67\xf5\x92\x63\xaf\xa9\x0e\x96\x26\x3c\x99\x3c\x18\x77\x80\x73\x07\xcc\xd6\x60\x37\xb5\xe0\x71\x44\x8b\x37\xe9\x8c\xde\xf7\x27\x99\xee\x53\x63\xea\x4e\xff\x43\xcb\x8c\x21\x4b\xa4\x0c\x88\x78\x0d\x0f\x10\xa4\x1a\xc8\xfc\x37\x20\xec\xb3\x5f\x56\x8e\xa1\xc6\x40\x23\xab\x54\xae\x76\x7c\xa0\x53\x24\x5a\xcd\x93\x06\xfe\xd0\xbf\x03\xb9\xca\x03\x45\x86\xf0\x3d\x95\x9a\x02\xe9\x43\x48\x7f\xae\xa7\x5c\xd3\x59\x88\x53\x2e\xb8\x6e\xff\x7a\x61\x97\xbe\xc9\x54\x09\x1a\xe6\x6b\x56\x5e\xaf\x63\x6c\xa7\x89\xb2\x2f\xad\x85\x8a\xdd\x43\xac\xbe\x39\x38\xb0\x09\x50\xa1\x4a\xc9\x0a\x97\x67\xc6\x0c\x2a\x18\xd8\xfc\x41\xf6\x5c\x53\x0c\x57\x34\x75\x14\x37\xef\xa8\x0a\xf9\x2c\x88\xdd\xba\x4c\x85\xce\xf2\x34\xb3\xf0\x58\xc8\x9d\x6e\x45\x4d\xe5\x60\x14\x43\x20\xe3\x35\x18\x48\x43\x1b\xcf\x51\x20\x88\x81\x50\x30\xb8\xcd\x90\xcf\x9a\xbf\xec\x1f\xd3\xb4\x32\xa9\xd3\xe6\x94\x02\x81\x8c\x39\xb2\x02\xc3\x94\xf0\xf3\x6c\xaf\xb0\x31\xc7\x20\x12\x18\xce\x69\x1a\xea\xe4\x22\x8f\xc5\x05\x2a\x25\x55\xd2\x56\x68\x77\x12\x25\x2b\xbc\x50\x20\x3c\xcf\x01\x8e\x4e\x8e\x89\xc2\xdb\x6c\x08\xa0\x60\xb0\x75\x6c\xa3\xa8\x58\xa0\x63\xa4\x8b\x8c\x8d\xa0\xd5\x86\x46\x4e\x92\xdb\xad\xb7\xcf\xd2\x96\xdc\x1d\x83\xe5\x54\x9f\x6d\x33\xe5\xb4\xd9\x14\xe0\x01\xd5\xf0\xe7\x9f\x70\xd6\x1f\xbe\x3b\x83\x07\x98\xd1\x04\xff\xff\x77\x20\x0c\xde\x80\x5f\x3b\xec\x96\x76\x67\x23\xd8\xf5\xda\x4f\x09\x2a\x53\xaf\x06\xaa\x3f\x7c\xe7\x79\x96\xc6\x5f\x00\x99\x57\xec\x36\xfd\xcb\x2f\x71\xb8\x96\x69\xb0\x3c\x25\xe7\xcd\x79\x15\x5a\x75\x57\x3c\x8d\x7a\x42\xbe\x40\xcf\xe1\x0f\x5a\xa1\xf9\x09\xac\x85\x23\xa4\xa1\x75\xe1\x97\x2f\xf0\xf0\x70\x72\x43\xb9\x77\x36\xe3\x15\x6f\x66\x8c\x42\x82\x90\xa3\xd0\x24\x48\x95\x42\xa1\x1b\x31\x46\x06\xaa\xd0\xd6\xb9\xbf\x3f\x7c\x67\xfc\x7d\x52\x89\xb7\x52\xea\x44\x2b\x1a\xdb\xe8\x11\x42\x3c\x1a\xf3\x5b\x54\x09\x97\xa2\x05\x77\xaf\xbd\x15\x17\xac\x05\x2e\x26\x5e\x76\x16\x09\xa4\xd0\xf8\x43\xb7\x72\x76\x23\xb3\x1c\xe6\x1f\x59\x72\x7b\x41\x98\x26\x1a\x55\xd2\xf2\x08\x64\xcf\x2d\x57\x97\xa8\x34\x9f\xf3\x80\x6a\x24\x34\xd5\x4b\xa9\xb8\x5e\xdb\x0c\x6d\x41\xed\xdc\x68\x5d\x11\xb7\xe3\xd1\xce\xdf\xa5\xd4\x03\x68\x65\xf2\xea\xec\xb3\xc8\x1a\x44\x62\xa7\xc4\xe7\xe1\xb9\x61\xd3\x92\xb7\x49\xea\x16\x14\x16\x38\x23\x9d\x05\x99\xc1\xce\x82\xcc\x9c\x42\xd2\x52\x49\x62\x56\x8e\xfc\x51\xa0\x9e\xf6\x94\xd9\x69\x0f\x39\x21\xe8\x65\xe0\xf6\x18\x9a\x10\xf3\x42\xf0\x87\x56\xb4\x05\x9b\xad\x5d\xd5\x72\x85\xc2\xb5\xba\x62\xdb\xc4\xac\x15\xd5\x93\x0d\x25\x2a\x7a\x3c\x27\xf7\xd3\xc1\xa4\x72\xc4\xfe\xcf\x4c\x8f\x47\xb3\xe1\x16\xde\x1c\x2f\xee\x06\x46\x5b\x03\x2f\x80\xf1\x79\x55\xbd\xfa\x27\x6b\x78\x37\x96\x98\x9a\x38\x00\x38\x3e\xc7\x7f\xb2\x7c\x2b\xe6\x1c\xc7\xab\x63\x44\x01\x02\xef\x51\x81\xa5\x1d\x70\x1e\x00\x79\xf0\xce\xec\x88\xcb\x50\xc1\x9d\x2b\x8b\x6c\xa6\x34\x3e\x74\x8c\xe8\x8a\xa3\x2b\xa3\x88\x5a\xea\x3b\x1a\x25\xc7\x69\x10\x60\x92\xcc\xd3\x30\x5c\x03\x8d\xe3\xd0\x74\x15\x81\xf7\xfb\x07\x95\xe0\x01\x92\x75\xa2\x31\x0a\x74\x08\x8c\x62\x24\x05\x71\x47\x59\xf6\x2e\x51\xb6\xa5\xea\x54\x70\x9d\x98\x48\x9b\x8f\x7c\x6e\x7b\xf5\xb9\xc8\x25\x6a\xf6\xfb\x80\x46\xd8\xb3\x3c\x5e\xaf\xfc\x76\x4b\xd5\x15\x9f\x5d\x9b\x5e\x53\x2d\x50\xba\x06\x15\x77\x17\x55\x37\xa7\xee\xab\x8b\xc2\x4c\x27\x50\xea\x11\xf0\xea\x55\xe9\xbb\xc2\x44\x53\xa5\x81\x10\x21\xc9\x2c\x94\xc1\xaa\x2c\x5b\xee\x4e\xa5\xc7\x13\xae\xcc\xb0\xcc\x78\x12\x86\xe0\xdc\xa0\x70\x8e\x0a\x45\x80\x0c\xb8\x30\x81\xd8\x73\x72\xa3\x98\x0d\xfe\x8b\xa4\x74\x3d\xfd\x91\x3a\x78\x2a\x07\x5f\x42\x27\xb1\xaa\xcc\x79\x88\x10\x50\x01\x33\x84\x34\x66\xd4\xaa\x3e\x93\x77\x78\x01\x0b\xd4\x30\x57\x98\x2c\x21\xc8\x6e\x6c\x0d\xd7\xc5\x4d\x11\xaa\xe8\x51\x7d\x2b\xea\xc2\xf3\x3a\x83\xc1\x70\xd2\x99\x5c\x0e\x07\xd3\x51\x7f\x3c\xe9\x8c\x26\xd3\xf1\x5f\xe3\x49\xff\xba\x67\x29\xcf\x4e\xe9\xfe\xbd\x54\x2b\x54\x8d\x05\x55\x0c\x05\x2a\xd7\x80\x9b\x99\x5f\x89\x8b\x1a\x23\x86\x4e\x79\x80\x89\xef\x79\x2f\x61\xa2\xd6\x66\x10\x9a\x73\xc1\x60\x20\x19\x82\x9c\x7d\xc3\x40\x9b\x3b\x09\xe8\x25\x4f\x20\xa2\x66\x2c\xc7\xac\x09\x3e\xb7\x05\x16\x45\xb3\xd9\x7c\x1d\x0c\x7b\xfd\xb6\x5f\x3b\x6f\xca\x58\xdb\xbf\x0d\x0c\x27\x9a\xe4\x21\x64\x55\xec\x6d\xfb\x5f\xb7\xdb\xa7\x90\x37\x9b\xaf\xbe\x75\xad\x30\x9a\x92\x10\x7c\x03\xa0\x04\x6a\x4c\x1a\x5c\x36\x97\x32\xd1\xf6\xbe\x59\x3b\xcf\x1f\xeb\xbe\x99\xd1\x16\x92\x98\xb1\x33\xa4\x1a\xed\xa5\xc4\x5c\xca\xb8\xc6\x28\xb1\xa0\x70\xce\x05\xc3\x1f\xf9\xd2\xaf\xf5\x46\x84\x9a\x9a\x1e\xd6\xc8\x12\xd9\x6d\xc9\xc4\x4e\x4b\x53\x21\xcc\xa8\xce\xa5\x48\xe0\xb3\x5f\x7b\x46\xcc\x3e\xfb\xa6\xe8\x4c\xcd\xfc\x1d\xd8\x4e\x73\x57\x75\xc5\x83\x5f\x37\xae\xf6\xb2\xab\xb4\x1d\x53\x7e\x82\x5f\x33\x51\xda\x8b\x1c\x80\x59\xb2\xd7\x27\xbf\xb8\x3f\x39\xa9\x07\xa0\xf7\x2b\x38\xdb\xc4\x8a\x0b\x0d\xb5\xd7\xdb\xb3\xba\x2b\xab\x43\x15\xa6\x93\x61\xae\xde\x53\x20\xbf\x65\x20\xa6\x40\x00\x5e\xc2\x27\x5b\x50\x45\xf9\x34\x6d\x2e\x13\x97\x0e\x76\xbe\x80\x9d\x47\xcc\x10\x5d\x4e\x5e\x3e\x87\x58\x26\x09\x9f\x85\x58\x65\xa6\x1d\xaa\xcd\x9c\xf6\xea\x55\x9e\xd3\xb5\xbd\x3f\x76\x0e\xfc\xf0\x44\xe2\x3e\x5d\x0f\x99\xa6\xe8\xf2\xb6\xac\x84\x7f\xda\xbe\xf6\xfe\xb8\x93\xab\x66\x12\x9a\xc8\x3b\x54\xf7\x8a\x6b\x2c\x39\x6c\x94\x51\x71\x56\xe6\x90\x97\xb9\xb1\x5f\xe1\xf7\x14\x13\x8d\xcc\x0c\x0d\x4e\x6e\x1a\x04\xac\x6d\xec\x33\x95\x9e\xc9\x1a\x8e\x2d\xa2\xf4\x48\x2c\x4d\xf0\x12\x64\xe0\x27\xcd\x8b\x26\x34\x17\x7e\xfd\x0f\x60\xee\x96\xe3\x9c\x5d\xdb\x64\x88\x5b\x68\xb7\x61\xdf\xb4\xa2\xdd\xfc\xb2\xef\xe5\x7d\xcd\xd6\xd9\x9a\x19\xd5\xb8\x48\xdd\x5f\x30\x73\x5e\xea\x1d\x99\xbd\x5c\x2c\x0e\x4d\x86\x5a\xfe\xc0\x52\x34\xec\xf6\x9c\x6a\x29\xa5\xd3\x61\xcf\xce\x9b\x9c\x9f\xe3\xfa\x66\x9a\xd1\xca\x6a\xc5\xa4\x30\x3f\x7f\x67\x8e\xd4\x36\xcf\xd0\x7f\x4b\x7c\x6f\xe7\xfe\x92\x2b\x6d\x08\xfc\xf5\x41\x4e\x3f\xe9\xc3\x13\x41\xfb\x5f\xbb\xf4\xc4\x31\x65\x0f\xbb\xae\xf9\x9f\x00\x00\x00\xff\xff\x92\x33\x1d\xa1\x73\x16\x00\x00")

func scriptsExecuteCloudConfigTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsExecuteCloudConfigTplSh,
		"scripts/execute-cloud-config.tpl.sh",
	)
}

func scriptsExecuteCloudConfigTplSh() (*asset, error) {
	bytes, err := scriptsExecuteCloudConfigTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/execute-cloud-config.tpl.sh", size: 5747, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/execute-cloud-config.tpl.sh": scriptsExecuteCloudConfigTplSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"execute-cloud-config.tpl.sh": &bintree{scriptsExecuteCloudConfigTplSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
