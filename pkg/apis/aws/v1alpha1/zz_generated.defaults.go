//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&CloudProfileConfig{}, func(obj interface{}) { SetObjectDefaults_CloudProfileConfig(obj.(*CloudProfileConfig)) })
	scheme.AddTypeDefaultingFunc(&ControlPlaneConfig{}, func(obj interface{}) { SetObjectDefaults_ControlPlaneConfig(obj.(*ControlPlaneConfig)) })
	scheme.AddTypeDefaultingFunc(&WorkerStatus{}, func(obj interface{}) { SetObjectDefaults_WorkerStatus(obj.(*WorkerStatus)) })
	return nil
}

func SetObjectDefaults_CloudProfileConfig(in *CloudProfileConfig) {
	for i := range in.MachineImages {
		a := &in.MachineImages[i]
		for j := range a.Versions {
			b := &a.Versions[j]
			for k := range b.Regions {
				c := &b.Regions[k]
				SetDefaults_RegionAMIMapping(c)
			}
		}
	}
}

func SetObjectDefaults_ControlPlaneConfig(in *ControlPlaneConfig) {
	SetDefaults_ControlPlaneConfig(in)
	if in.Storage != nil {
		SetDefaults_Storage(in.Storage)
	}
}

func SetObjectDefaults_WorkerStatus(in *WorkerStatus) {
	for i := range in.MachineImages {
		a := &in.MachineImages[i]
		SetDefaults_MachineImage(a)
	}
}
