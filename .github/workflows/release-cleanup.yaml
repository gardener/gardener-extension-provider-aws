name: Cleanup Old Releases

on:
  schedule:
    # Runs every Sunday at 12:00 AM UTC
    - cron: '0 0 * * 0'

  workflow_dispatch: # Optional manual trigger

permissions:
  contents: write   # This allows deleting branches

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Cleanup old branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          #!/bin/bash
          set -e

          headers=(-H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json")

          # Get latest release version
          latest_tag=$(curl -s "${headers[@]}" "https://api.github.com/repos/$REPO/releases" | \
                        jq -r '.[].tag_name | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))' | sort -Vr | head -n 1)

          if [[ -z "$latest_tag" ]]; then
            echo "No valid releases found."
            exit 0
          fi

          echo "Latest release: $latest_tag"

          # Parse major and minor
          IFS='.' read -r major minor patch <<<"${latest_tag#v}"
          
          # Check if minor version is smaller than 3
          if [[ $minor -lt 3 ]]; then
            echo "Latest minor version ($minor) is smaller than 3. No branches or milestones to delete."
            exit 0
          fi
          
          cutoff_minor=$((minor - 3))
          echo "Will delete all release branches <= v$major.$cutoff_minor"

          # Fetch all branches
          branches=$(curl -s "${headers[@]}" "https://api.github.com/repos/$REPO/branches?per_page=1000" | jq -r '.[].name')

          for branch in $branches; do
            if [[ $branch =~ ^release-v([0-9]+)\.([0-9]+) ]]; then
              b_major=${BASH_REMATCH[1]}
              b_minor=${BASH_REMATCH[2]}

              # Compare: same major, and minor <= cutoff
              if [[ $b_major -eq $major && $b_minor -le $cutoff_minor ]]; then
                echo "Deleting old branch: $branch"
                curl -s -X DELETE "${headers[@]}" "https://api.github.com/repos/$REPO/git/refs/heads/$branch" || true
              fi
            fi
          done
